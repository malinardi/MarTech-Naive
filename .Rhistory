knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(error = FALSE)
options(repos = "https://cran.rstudio.com")
rm(list = ls())
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(tidyverse,
Hmisc,
stargazer,
visdat,
rmarkdown,
knitr,
GGally,
summarytools,
extremevalues,
DataExplorer,
gplots,
ggplot2,
SmartEDA,
kableExtra,
e1071,
caret
)
p_loaded()
dados <- read.csv("BankChurners.csv")
# excluir as ultimas duas colunas para ocultar o resultado anterior do projeto
dados <- dados[ ,1:21]
#varificar se há alguma linha repetida
anyDuplicated(dados)
ExpData(dados,type=1)
ExpData(dados,type=2)
str(dados)
plot_intro(dados)
# define a proporção de dados que será usada para treinamento (por exemplo, 0.7 para 70%)
index <- createDataPartition(dados$Attrition_Flag, p = 0.7, list = FALSE)
indx
index
# Crie conjuntos de treinamento e teste com base nos índices
conjunto_treinamento <- dados[index, ]
conjunto_teste <- dados[-index, ]
# Criar um modelo Naive Bayes
modelo_nb <- naiveBayes(Attrition_Flag ~ ., data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
matriz_confusao <- table(conjunto_teste$diabetes, previsoes)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- sum(diag(matriz_confusao)) / sum(matriz_confusao)
precisao <- matriz_confusao[2, 2] / sum(matriz_confusao[, 2])  # Para a classe positiva
revocacao <- matriz_confusao[2, 2] / sum(matriz_confusao[2, ])  # Para a classe positiva
print(acuracia)
print(paste("A acurácia do modelo é:", acuracia))
print(paste("A acurácia do modelo é:", acuracia))
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[2, 2] / sum(matriz_confusao[, 2]),3)  # Para a classe positiva
revocacao <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)  # Para a classe positiva
print(paste("A acurácia do modelo é:", acuracia))
print(paste("A acurácia do modelo é:", acuracia))
print(paste("A precisão do modelo é:", precisao))
print(paste("A revocação do modelo é:", revocação))
print(paste("A revocação do modelo é:", revocacao))
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[2, 2] / sum(matriz_confusao[, 2]),3)  # Para a classe positiva
revocacao <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)  # Para a classe positiva
print(paste("A acurácia do modelo é:", acuracia))
print(paste("A precisão do modelo é:", precisao))
print(paste("A revocação do modelo é:", revocacao))
matriz_confusao[2,2]
matriz_confusao[2, ]
diag(matriz_confusao)
sum(diag(matriz_confusao))
sum(matriz_confusao))
sum(matriz_confusao)
matriz_confusao[,2]
matriz_confusao[1,]
precisao <- round((matriz_confusao[1, 1] / sum(matriz_confusao[1, ]),3)  # Para a classe positiva
precisao <- round((matriz_confusao[1, 1] / sum(matriz_confusao[1, ]),3)  # Para a classe positiva
precisao <- round((matriz_confusao[1, 1] / sum(matriz_confusao[1, ]),3)  # Para a classe positiva
matriz_confusao[1, 1]
matriz_confusao
sum(matriz_confusao[1, ])
sum(matriz_confusao[2, ])
sum(matriz_confusao[, 1])
precisao <- round((matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
precisao <- matriz_confusao[1, 1] / sum(matriz_confusao[, 1])
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
matriz_confusao[2, 2]
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
matriz_confusao
previsoes
matriz_confusao
matriz_confusao[2,2]
matriz_confusao[2, ]
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print("Classe Positiva")
print(paste("A precisão do modelo é:", precisao))
print(paste("A sensibilidade do modelo é:", sensibilidade))
print("Classe Negativa")
print(paste("o NPV do modelo é:", npv))
print(paste("A especificidade do modelo é:", esp))
print(paste("A acurácia do modelo é:", acuracia))
print(matriz_confusao)
colnames(dados)
# Criar um modelo Naive Bayes
modelo_nb <- naiveBayes(Attrition_Flag ~ Months_on_book,Months_Inactive_12_mon , data = conjunto_treinamento)
# Criar um modelo Naive Bayes
modelo_nb <- naiveBayes(Attrition_Flag ~ Months_on_book,Months_Inactive_12_mon , data = conjunto_treinamento)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print("Classe Positiva")
print(paste("A precisão do modelo é:", precisao))
print(paste("A sensibilidade do modelo é:", sensibilidade))
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo é:", sensibilidade))
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print("Classe Positiva")
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo é:", sensibilidade))
print(paste("o NPV do modelo é:", npv))
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
modelo_nb <- naiveBayes(Attrition_Flag ~ Months_on_book + Months_Inactive_12_mon , data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
modelo_nb <- naiveBayes(Attrition_Flag ~ Card_Category + Contacts_Count_12_mon + Dependent_count + Education_Level + Months_Inactive_12_mon_2 , data = conjunto_treinamento)
colnames(dados)
modelo_nb <- naiveBayes(Attrition_Flag ~ Card_Category + Contacts_Count_12_mon + Dependent_count + Education_Level + Months_Inactive_12_mon , data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
table(previsoes)
table(conjunto_teste$Attrition_Flag)
colnames(dados)
modelo_nb <- naiveBayes(Attrition_Flag ~ Card_Category + Contacts_Count_12_mon + Dependent_count + Education_Level + Months_Inactive_12_mon + Total_Ct_Chng_Q4_Q1, data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
modelo_nb <- naiveBayes(Attrition_Flag ~ Card_Category + Contacts_Count_12_mon + Dependent_count + Education_Level + Months_Inactive_12_mon + Total_Ct_Chng_Q4_Q1 + Avg_Utilization_Ratio, data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
# Criar um modelo Naive Bayes
modelo_nb <- naiveBayes(Attrition_Flag ~ ., data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
colnames(dados)
# Criar um modelo Naive Bayes
modelo_nb <- naiveBayes(Attrition_Flag ~ . -CLIENTNUM - Attrition_Flag, data = conjunto_treinamento)
# Criar um modelo Naive Bayes
modelo_nb <- naiveBayes(Attrition_Flag ~ . -CLIENTNUM - Attrition_Flag, data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
modelo_nb <- naiveBayes(Attrition_Flag ~ . -CLIENTNUM - Attrition_Flag - Card_Category, data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
# Criar um modelo Naive Bayes
modelo_nb <- naiveBayes(Attrition_Flag ~ . -CLIENTNUM, data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(" ")
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(error = FALSE)
options(repos = "https://cran.rstudio.com")
rm(list = ls())
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(tidyverse,
rmarkdown,
knitr,
GGally,
DataExplorer,
gplots,
SmartEDA,
e1071,
caret
)
p_loaded()
dados <- read.csv("BankChurners.csv")
# excluir as ultimas duas colunas para ocultar o resultado anterior do projeto
dados <- dados[ ,1:21]
#varificar se há alguma linha repetida
anyDuplicated(dados)
ExpData(dados,type=1)
ExpData(dados,type=2)
str(dados)
plot_intro(dados)
# Defina a semente para reproduzibilidade
set.seed(123)
# define a proporção de dados que será usada para treinamento (por exemplo, 0.7 para 70%)
index <- createDataPartition(dados$Attrition_Flag, p = 0.7, list = FALSE)
# Crie conjuntos de treinamento e teste com base nos índices
conjunto_treinamento <- dados[index, ]
conjunto_teste <- dados[-index, ]
# Criar um modelo Naive Bayes
modelo_nb <- naiveBayes(Attrition_Flag ~ . -CLIENTNUM, data = conjunto_treinamento)
# Fazer previsões
previsoes <- predict(modelo_nb, conjunto_teste)
# Supondo que 'verdadeiro' são os rótulos reais e 'previsoes' são as previsões do modelo
matriz_confusao <- table(conjunto_teste$Attrition_Flag, previsoes)
print(matriz_confusao)
acuracia <- round(sum(diag(matriz_confusao)) / sum(matriz_confusao),3)
precisao <- round(matriz_confusao[1, 1] / sum(matriz_confusao[, 1]),3)
sensibilidade <- round(matriz_confusao[1, 1] / sum(matriz_confusao[1,]),3)
npv <- round(matriz_confusao[2, 2] / sum(matriz_confusao[2, ]),3)
esp <- round(matriz_confusao[2, 2] / sum(matriz_confusao[ ,2]),3)
print(" ")
print(paste("A precisão do modelo e:", precisao))
print(paste("A sensibilidade do modelo e:", sensibilidade))
print(paste("o NPV do modelo e:", npv))
print(paste("A especificidade do modelo e:", esp))
print(paste("A acurácia do modelo e:", acuracia))
